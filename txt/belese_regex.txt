BELESKE - REGEX

".{3}\\..{3}\\..{3}\\..{3}" 	- matches "abc.def.ghi.jkl" (use escape \\. to match exactly dot ch)
".{3}[.].{3}[.].{3}[.].{3}"		- also matches "abc.def.ghi.jkl" ([.] matches exactly dot character)

"(\\d{2}\\D{1}){2}\\d{4}"		- matches "xxXxxXxxxx", x - digit, X - non-digit (brackets indicate capturing group)

"(\\S{2}\\s){2}\\S{2}"			- matches "XXxXXxXX", X - non-whitespace, x - whitespace

"\\w{3}\\W\\w{10}\\W\\w{3}"		- matches "xxxXxxxxxxxxxxXxxx", x - word char, X - non-word char

"^\\d\\w{4}\\.$"				- matches "Xxxxx.", X - digit, x - word char (^ goes to beginning, $ goes to the end)

"^[A-Z]{5}\\d{4}[A-Z]$"			- matches "XXXXXxxxxX", X - upper case letter, x - digit

"hackerrank.*?hackerrank" ||
"hackerrank"					- matches "hackerrank ... hackerrank" or "hackerrank"

"(?i)hi [^d].*"					- H/h, I/i, space, not D/d, ... ; (?i) - case insensitive flag

// Recognize a language between C, Java, Python

	if (line.matches("(?i)#include*+.*+") ||
		line.matches("\\/\\*.*\\s\\*\\/") ||
		line.matches("(?i)scan.*+")		) {
			System.out.println("C");
			break;
	}
            
	if (line.matches("(?i).*?class.+\\{"  ) ||
		line.matches("(?i).*?import*+.*+")) {
			System.out.println("Java");
			break;
	}
            
	if (line.matches("(?i)print *.+") ||
		line.matches("(?i).*?def.*+") ||
		line.matches("#\\s.*+")		)  {
			System.out.println("Python");
			break;
	}
	
"^[1-3][0-2][xs0][30Aa][xsu][.,]$" 	
								- ^ and $ were important here

"^[_.][0-9]++[a-zA-Z]*?_??$"	- _ or . chars, followed by one or more digits, followed by zero or more letters, ends with optional _

"^((25[0-5]|2[0-4][0-9]|1?+[0-9]{1,2}|[0-9]{1})\\.){3}(25[0-5]|2[0-4][0-9]|1?+[0-9]{1,2}|[0-9]{1})$"
								- matches IPv4 address
								
"^([a-f0-9]{1,4}:){7}([a-f0-9]{1,4})$"
								- matches IPv6 address
								
"\b[AEIOUaeiou][a-zA-Z]*\b"		- matches all words starting with vowels and containing only (lowercase and uppercase) letters

"^(Mr\.|Mrs\.|Ms\.|Dr\.|Er\.)(?:[a-zA-Z]{1,})$"
								- string starts with Mr.|Mrs.|Ms.|Dr.|Er. and contains only letters (^ start of string, $ end of string)
								
^(\d{2}?)((-\d{2}){3}|(\d{2}){3})$
								- matches 12345678 or 12-34-56-78 (but not 1-234-56-78 or 12-45-8708)
								
- problemi se cesto desavaju kada se ne postave pocetak (^) i kraj ($) stringa...

^(\2tic|(tac))+$				- forward reference : string has to start with "tac" and there can be only one "tic" in a row and can 
								  appear only once there were at least two "tac" strings
								  
(.)(?!\1)						- negative lookahead : matches any character not immediately followed by itself

(o)(?=oo)						- positive lookahead : matches any characters "o" immediately followed by "oo"

(?<=[13579])\d					- positive lookbehind : match occurances of digits immediately preceded by an odd digit

(?<![aeiouAEIOU]).				- negative lookbehind : match occurances of characters not immediately preceded by a vowel

